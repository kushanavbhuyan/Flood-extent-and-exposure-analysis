//Here "roi" is a polygon of Kasese, a town in Western Uganda.
//Import Kasese shape file from ArcGIS Online or any other source
var roi = table.geometry();
Map.centerObject(roi);
Map.addLayer(roi, {color: "yellow"}, "Kasese", 0);

//Image collection
var collectionVH = ee.ImageCollection("COPERNICUS/S1_GRD")
                  .filter(ee.Filter.eq("instrumentMode", "IW"))
                  .filter(ee.Filter.listContains("transmitterReceiverPolarisation","VH"))
                  .filter(ee.Filter.eq("orbitProperties_pass", "DESCENDING"))
                  .filterMetadata("resolution_meters", "equals", 10)
                  .filterBounds(roi)
                  .select(["VH"]);                  


//Filter by date of the event
var before_event_VH = collectionVH.filterDate("2020-04-25", "2020-05-01").mosaic();
var after_event_VH = collectionVH.filterDate("2020-05-15", "2020-05-31").mosaic();

print(before_event_VH, "before VH");
print(after_event_VH, "after VH");

Map.addLayer(before_event_VH, {min: -20, max:-7}, "Before event VH", 0);              
Map.addLayer(after_event_VH, {min: -20, max:-7}, "After event VH", 0); 

//Apply speckle filter
var smooth = 50;
var before_filtered = before_event_VH.focal_mean(smooth, "circle", "meters");
var after_filtered = after_event_VH.focal_mean(smooth, "circle", "meters");


//................FLOOD EXTENT CALCULATION.....................\\

//Difference between the events
var diff = after_filtered.divide(before_filtered);

// Combine the mean and standard deviation reducers.
var reducers = ee.Reducer.mean().combine({
reducer2: ee.Reducer.stdDev(),
sharedInputs: true
});

//Calculate the mean and standard deviation for each difference image for the threshold value
var diffstats = diff.reduceRegion({
reducer: reducers,
geometry: newroi,
scale: 10,
});

print('stats:', diffstats);

//Apply threshold for the flooded areas
//Multiply the std dev by 1.5 and add the mean for the threshold ~ 1.18296
var threshold = 1.18296;
var flood_areas = diff.gt(threshold);

//Refine flood calculation using other datasets
      // Include the JRC layer on surface water seasonality to mask flood pixels from areas
      // of "permanent" water (where there is water > 10 months of the year)
      
      var swater = ee.Image("JRC/GSW1_1/GlobalSurfaceWater").select("seasonality");
      var swater_mask = swater.gte(10).updateMask(swater.gte(10));

      //Flooded layer where perennial water bodies (water > 10 mo/yr) is assigned a 0 value
      var flood_mask = flood_areas.where(swater_mask,0);
            
      //Final flooded area without pixels in perennial waterbodies
      var flooded = flood_mask.updateMask(flood_mask);
      
      // Compute connectivity of pixels to eliminate those connected to 8 or fewer neighbours
      // This operation REDUCES NOISE of the flood extent product 
      var connections = flooded.connectedPixelCount();
      var flooded = flooded.updateMask(connections.gt(8));
      
      // Mask out areas with more than 5 percent slope using a Digital Elevation Model 
      var DEM = ee.Image('WWF/HydroSHEDS/03VFDEM');
      var terrain = ee.Algorithms.Terrain(DEM);
      var slope = terrain.select("slope");
      var flooded = flooded.updateMask(slope.lt(5).clip(newroi));
      
// Calculate flood extent area
// Create a raster layer containing the area information of each pixel
var flooded_pixelarea = flooded.select("VH").multiply(ee.Image.pixelArea());

// Sum the areas of flooded pixels
// default is set to 'bestEffort: true' in order to reduce compuation time, for a more 
// accurate result set bestEffort to false and increase 'maxPixels'
var flood_stats = flooded_pixelarea.reduceRegion({
  reducer: ee.Reducer.sum(),              
  geometry: roi,
  scale: 10, // native resolution 
  //maxPixels: 1e9,
  bestEffort: true
  });

//Convert pixel area to hectares
var flood_areahectares = flood_stats
                        .getNumber("VH")
                        .divide(10000)
                        .round();
                        
print(flood_areahectares, "Area flooded (in hectares)");


//................................DAMAGE ASSESSMENT.................................\\

//..........EXPOSED POPULATION DENSITY............\\

var population_count = ee.ImageCollection("WorldPop/POP").filterBounds(newroi)
                                                         .first();

var GHSLprojection = population_count.projection();

//Reproject the flood layer to GHSL projection
var flood_reprojected = flooded.reproject({
                        crs: GHSLprojection
                        });
                        
// Create a raster showing exposed population only using the resampled flood layer 
//and update with the population count
var population_exposed = population_count.updateMask(flood_reprojected);

//Sum pixel values of exposed population raster 
var pop_stats = population_count.reduceRegion({
            reducer: ee.Reducer.sum(),
            geometry: roi,
            scale: 100,
            maxPixels: 1e9,
            });

//Get the number of exposed population
var number_exposed = pop_stats.getNumber("population").round();
print(number_exposed, "Population exposed to the May 2020 Floods");


//----------------------------- Affected agricultural land ----------------------------\\

// using MODIS Land Cover Type Yearly Global 500m
// filter image collection by the most up-to-date MODIS Land Cover product 

var LC = ee.ImageCollection("MODIS/006/MCD12Q1")
            .filterDate("2014-01-01", "2019-04-30")
            .sort("system_index", false)
            .select("LC_Type1")
            .first()
            .clip(roi);
            
// Extract only cropland pixels using the classes cropland (>60%) and Cropland/Natural 
// Vegetation Mosaics: mosaics of small-scale cultivation 40-60% incl. natural vegetation
var cropmask = LC.eq(12).or(LC.eq(14));
var cropland = LC.updateMask(cropmask);

//Get the MODIS projection and reproject to the flooded areas
var modis_projection = LC.projection();

var flooded_reprojected_modis = flooded.reproject({
                                crs: modis_projection
                                });
                                
// Calculate affected cropland using the resampled flood layer
var crop_affected = cropland.updateMask(flooded_reprojected_modis);

// get pixel area of affected cropland layer
var crop_pixelarea = crop_affected.multiply(ee.Image.pixelArea());

//Sum the area pixels
var LC_stats = crop_pixelarea.reduceRegion({
               reducer: ee.Reducer.sum(),
               geometry: roi,
               scale: 500,
               maxPixels: 1e9
              });
              
//Calculate and convert the area to hectares
var crop_flooded_hectare = LC_stats
                           .getNumber("LC_Type1")
                           .divide(10000)
                           .round();
print(crop_flooded_hectare, "Cropland area destroyed (in hectares) ");

//-------------------------------- Affected urban area ------------------------------\\

// Use the Tsinghua dataset for urban areas 
//You can also use "urban" landcover from MODIS that was loaded above:
            //var LC = ee.ImageCollection("MODIS/006/MCD12Q1")
            //.filterDate("2014-01-01", "2019-04-30")
            //.sort("system_index", false)
            //.select("LC_Type1")
            //.first()
            //.clip(roi);

            // Extract only cropland pixels using the classes cropland (>60%) and Cropland/Natural 
            // Vegetation Mosaics: mosaics of small-scale cultivation 40-60% incl. natural vegetation
            var cropmask = LC.eq(12).or(LC.eq(14));
            var cropland = LC.updateMask(cropmask);
     //The steps above are for MODIS 
            
// Filter urban areas
var urban = ee.Image("Tsinghua/FROM-GLC/GAIA/v10").clip(newroi);
var urban_projection = urban.projection();

var flood_urban_reproject = flooded.reproject({
                            crs: urban_projection
                            });

var urban_exposed = urban.mask(flood_urban_reproject);

//Get the pixel of the urban affected area
var urban_exposed_pixelarea = urban_exposed.multiply(ee.Image.pixelArea());

//Sum the pixels
var urban_stats = urban_exposed_pixelarea.reduceRegion({
                  reducer: ee.Reducer.sum(),
                  geometry: roi,
                  scale: 100,
                  bestEffort: false,
                  });
                 
//Convert and calculate the area in hectares of the urban flooded
var urban_exposed_area =  urban_stats
                         .getNumber("change_year_index")
                         .divide(10000)
                         .round();
print(urban_exposed_area, "Urban area destroyed (in hectares");


//------------------------------  DISPLAY PRODUCTS  ----------------------------------\\

Map.centerObject(newroi, 14);

// Flooded areas
Map.addLayer(flooded,{palette:"0000FF"},'Flooded areas');

// Population Density
var populationCountVis = {
  min: 0,
  max: 200.0,
  palette: ['060606','337663','337663','ffffff'],
};
Map.addLayer(population_exposed, populationCountVis, 'Population Density',0);

// Exposed Population
var populationExposedVis = {
  min: 0,
  max: 300.0,
  palette: ['yellow', 'orange', 'red'],
};
Map.addLayer(population_exposed, populationExposedVis, 'Exposed Population', 0);

// Cropland
var croplandVis = {
  min: 0,
  max: 14.0,
  palette: ['30b21c'],
};
Map.addLayer(cropland, croplandVis, 'Cropland',0);

// Affected cropland
Map.addLayer(crop_affected, croplandVis, 'Affected Cropland', 0); 

// Urban
var urbanVis = {
  min: 0,
  max: 13.0,
  palette: ['red'],
};
Map.addLayer(urban, urbanVis, 'Urban',0);

// Affected urban
Map.addLayer(urban_exposed_pixelarea, urbanVis, 'Affected Urban'); 

//---------------------------------- MAP PRODUCTION --------------------------------\\

//-------------------------- Display the results on the map -----------------------\\

// set position of panel where the results will be displayed 
var results = ui.Panel({
  style: {
    position: 'bottom-left',
    padding: '8px 15px',
    width: '350px'
  }
});

//Prepare the visualtization parameters of the labels 
var textVis = {
  'margin':'0px 8px 2px 0px',
  'fontWeight':'bold'
  };
var numberVIS = {
  'margin':'0px 0px 15px 0px', 
  'color':'bf0f19',
  'fontWeight':'bold'
  };
var subTextVis = {
  'margin':'0px 0px 2px 0px',
  'fontSize':'12px',
  'color':'grey'
  };

var titleTextVis = {
  'margin':'0px 0px 15px 0px',
  'fontSize': '18px', 
  'font-weight':'', 
  'color': '3333ff'
  };

// Create lables of the results 
// Title and time period
var title = ui.Label('Results', titleTextVis);
var text1 = ui.Label('Flood status between:',textVis);
var number1 = ui.Label("2020-05-15".concat(" and ","2020-05-31"),numberVIS);

// Alternatively, print dates of the selected tiles
//var number1 = ui.Label('Please wait...',numberVIS); 
//(after_collection).evaluate(function(val){number1.setValue(val)}),numberVIS;

// Estimated flood extent 
var text2 = ui.Label('Estimated flood extent:',textVis);
var text2_2 = ui.Label('Please wait...',subTextVis);
var number2 = ui.Label('Please wait...',numberVIS); 
flood_areahectares.evaluate(function(val){number2.setValue(val+' hectares')}),numberVIS;

// Estimated number of exposed people
var text3 = ui.Label('Estimated number of exposed people: ',textVis);
var text3_2 = ui.Label('based on WorldPop 2020 (100m)',subTextVis);
var number3 = ui.Label('Please wait...',numberVIS);
number_exposed.evaluate(function(val){number3.setValue(val)}),numberVIS;

// Estimated area of affected cropland 
var MODIS_date = ee.String(LC.get('system:index')).slice(0,4);
var text4 = ui.Label('Estimated affected cropland:',textVis);
var text4_2 = ui.Label('Please wait', subTextVis)
MODIS_date.evaluate(function(val){text4_2.setValue('based on MODIS Land Cover '+val +' (500m)')}), subTextVis;
var number4 = ui.Label('Please wait...',numberVIS);
crop_flooded_hectare.evaluate(function(val){number4.setValue(val+' hectares')}),numberVIS;

// Estimated area of affected urban
var text5 = ui.Label('Estimated affected settlements:',textVis);
var text5_2 = ui.Label('Please wait', subTextVis)
MODIS_date.evaluate(function(val){text5_2.setValue('based on Tsinghua University '+val +' (30m)')}), subTextVis;
var number5 = ui.Label('Please wait...',numberVIS);
urban_exposed_area.evaluate(function(val){number5.setValue(val+' hectares')}),numberVIS;

// Disclaimer
var text6 = ui.Label('Disclaimer: This product has been derived automatically without validation data. All geographic information has limitations due to the scale, resolution, date and interpretation of the original source materials. No liability concerning the content or the use thereof is assumed by the producer.',subTextVis)

// Produced by...
var text7 = ui.Label('Script written by: Kushanav Bhuyan', subTextVis)

//Organisation
var text8 = ui.Label('Organisation: Faculty of ITC, the University of Twente, Netherlands', subTextVis);

// Add the labels to the panel 
results.add(ui.Panel([
        title,
        text1,
        number1,
        text2,
        text2_2,
        number2,
        text3,
        text3_2,
        number3,
        text4,
        text4_2,
        number4,
        text5,
        text5_2,
        number5,
        text6,
        text7,
        text8]
      ));

// Add the panel to the map 
Map.add(results);

//----------------------------- Display legend on the map --------------------------\\

// Create legend (*credits to thisearthsite on Open Geo Blog: https://mygeoblog.com/2016/12/09/add-a-legend-to-to-your-gee-map/)
// set position of panel
var legend = ui.Panel({
  style: {
    position: 'bottom-right',
    padding: '8px 15px',
  }
});
 
// Create legend title
var legendTitle = ui.Label('Legend',titleTextVis);
 
// Add the title to the panel
legend.add(legendTitle);
 
// Creates and styles 1 row of the legend.
var makeRow = function(color, name) {
 
      // Create the label that is actually the colored box.
      var colorBox = ui.Label({
        style: {
          backgroundColor: color,
          // Use padding to give the box height and width.
          padding: '8px',
          margin: '0 0 4px 0'
        }
      });
 
      // Create the label filled with the description text.
      var description = ui.Label({
        value: name,
        style: {margin: '0 0 4px 6px'}
      });
 
      // return the panel
      return ui.Panel({
        widgets: [colorBox, description],
        layout: ui.Panel.Layout.Flow('horizontal')
      });
};
 
//  Palette with the colors
var palette =['#0000FF', '#30b21c', 'red'];
 
// name of the legend
var names = ['Potentially flooded areas','Affected cropland','Affected settlements'];
 
// Add color and and names
for (var i = 0; i < 3; i++) {
  legend.add(makeRow(palette[i], names[i]));
  }  

// Create second legend title to display exposed population density
var legendTitle2 = ui.Label({
value: 'Exposed population density',
style: {
fontWeight: 'bold',
fontSize: '15px',
margin: '10px 0 0 0',
padding: '0'
}
});

// Add second title to the panel
legend.add(legendTitle2);

// create the legend image
var lon = ee.Image.pixelLonLat().select('latitude');
var gradient = lon.multiply((populationExposedVis.max-populationExposedVis.min)/100.0).add(populationExposedVis.min);
var legendImage = gradient.visualize(populationExposedVis);
 
// create text on top of legend
var panel = ui.Panel({
widgets: [
ui.Label('> '.concat(populationExposedVis['max']))
],
});
 
legend.add(panel);
 
// create thumbnail from the image
var thumbnail = ui.Thumbnail({
image: legendImage,
params: {bbox:'0,0,10,100', dimensions:'10x50'},
style: {padding: '1px', position: 'bottom-center'}
});
 
// add the thumbnail to the legend
legend.add(thumbnail);
 
// create text on top of legend
var panel = ui.Panel({
widgets: [
ui.Label(populationExposedVis['min'])
],
});
 
legend.add(panel);
 
// add legend to map (alternatively you can also print the legend to the console)
Map.add(legend);
